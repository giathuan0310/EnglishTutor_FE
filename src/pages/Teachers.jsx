import React, { useState, useMemo, useEffect } from 'react';
// X√≥a import d·ªØ li·ªáu tƒ©nh: import { teachersData } from '../data/teachers';
import './Teachers.css';

const Teachers = ({ setShowBookingModal, setSelectedTeacher, onTeacherClick }) => {
  // --- STATE QU·∫¢N L√ù D·ªÆ LI·ªÜU T·ª™ API ---
  const [teachersData, setTeachersData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // --- STATE CHO B·ªò L·ªåC V√Ä T√åM KI·∫æM (gi·ªØ nguy√™n) ---
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedSpecialty, setSelectedSpecialty] = useState('');
  const [priceRange, setPriceRange] = useState('');
  const [sortBy, setSortBy] = useState('rating');

  // --- G·ªåI API ƒê·ªÇ L·∫§Y D·ªÆ LI·ªÜU GI√ÅO VI√äN ---
  useEffect(() => {
    const fetchTeachers = async () => {
      try {
        const response = await fetch('https://englishtutor-be.onrender.com/tutors');
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const data = await response.json();
        setTeachersData(data);
      } catch (error) {
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };

    fetchTeachers();
  }, []); // M·∫£ng r·ªóng ƒë·∫£m b·∫£o useEffect ch·ªâ ch·∫°y m·ªôt l·∫ßn khi component mount

  // --- C·∫¨P NH·∫¨T LOGIC ƒê·ªÇ L·∫§Y DANH S√ÅCH CHUY√äN NG√ÄNH DUY NH·∫§T T·ª™ D·ªÆ LI·ªÜU API ---
  const specialties = useMemo(() => {
    const allSpecialties = teachersData.flatMap(teacher => teacher.specializations);
    return [...new Set(allSpecialties)];
  }, [teachersData]);

  // --- C·∫¨P NH·∫¨T LOGIC L·ªåC V√Ä S·∫ÆP X·∫æP V·ªöI C·∫§U TR√öC D·ªÆ LI·ªÜU M·ªöI ---
  const filteredTeachers = useMemo(() => {
    let filtered = teachersData.filter(teacher => {
      // T√¨m ki·∫øm theo t√™n, chuy√™n ng√†nh ho·∫∑c bio
      const matchesSearch = teacher.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        teacher.specializations.join(' ').toLowerCase().includes(searchTerm.toLowerCase()) ||
        teacher.bio.toLowerCase().includes(searchTerm.toLowerCase());

      // L·ªçc theo chuy√™n ng√†nh (ki·ªÉm tra trong m·∫£ng specializations)
      const matchesSpecialty = !selectedSpecialty || teacher.specializations.includes(selectedSpecialty);

      // L·ªçc theo kho·∫£ng gi√° (s·ª≠ d·ª•ng pricePerHour l√† ki·ªÉu s·ªë)
      let matchesPrice = true;
      if (priceRange) {
        const price = teacher.pricePerHour;
        switch (priceRange) {
          case 'low':
            matchesPrice = price < 300000;
            break;
          case 'medium':
            matchesPrice = price >= 300000 && price <= 350000;
            break;
          case 'high':
            matchesPrice = price > 350000;
            break;
          default:
            matchesPrice = true;
        }
      }

      return matchesSearch && matchesSpecialty && matchesPrice;
    });

    // S·∫Øp x·∫øp
    filtered.sort((a, b) => {
      switch (sortBy) {
        case 'rating':
          return b.rating - a.rating;
        case 'price-low':
          return a.pricePerHour - b.pricePerHour;
        case 'price-high':
          return b.pricePerHour - a.pricePerHour;
        case 'name':
          return a.name.localeCompare(b.name);
        default:
          return 0;
      }
    });

    return filtered;
  }, [searchTerm, selectedSpecialty, priceRange, sortBy, teachersData]);

  const handleBookingClick = (teacher) => {
    setSelectedTeacher(teacher);
    setShowBookingModal(true);
  };

  const clearFilters = () => {
    setSearchTerm('');
    setSelectedSpecialty('');
    setPriceRange('');
    setSortBy('rating');
  };

  // --- RENDER TR·∫†NG TH√ÅI LOADING V√Ä L·ªñI ---
  if (loading) {
    return <div className="container"><h2>ƒêang t·∫£i danh s√°ch gi√°o vi√™n...</h2></div>;
  }

  if (error) {
    return <div className="container"><h2>L·ªói: {error}</h2><p>Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu gi√°o vi√™n. Vui l√≤ng th·ª≠ l·∫°i sau.</p></div>;
  }

  return (
    <div className="teachers">
      <div className="container">
        {/* Header v√† Filters gi·ªØ nguy√™n */}
        <div className="teachers-header">
          <h1>ƒê·ªôi ng≈© gi√°o vi√™n ch·∫•t l∆∞·ª£ng</h1>
          <p>Ch·ªçn gi√°o vi√™n ph√π h·ª£p v·ªõi m·ª•c ti√™u h·ªçc t·∫≠p c·ªßa b·∫°n</p>
        </div>

        <div className="teachers-filters">
          {/* Ph·∫ßn JSX c·ªßa b·ªô l·ªçc kh√¥ng thay ƒë·ªïi */}
          <div className="search-box">
            <input
              type="text"
              placeholder="T√¨m ki·∫øm gi√°o vi√™n theo t√™n, chuy√™n ng√†nh..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="search-input"
            />
            <span className="search-icon">üîç</span>
          </div>

          <div className="filter-row">
            <div className="filter-group">
              <label>Chuy√™n ng√†nh:</label>
              <select
                value={selectedSpecialty}
                onChange={(e) => setSelectedSpecialty(e.target.value)}
                className="filter-select"
              >
                <option value="">T·∫•t c·∫£ chuy√™n ng√†nh</option>
                {specialties.map(specialty => (
                  <option key={specialty} value={specialty}>{specialty}</option>
                ))}
              </select>
            </div>

            <div className="filter-group">
              <label>Kho·∫£ng gi√°:</label>
              <select
                value={priceRange}
                onChange={(e) => setPriceRange(e.target.value)}
                className="filter-select"
              >
                <option value="">T·∫•t c·∫£ m·ª©c gi√°</option>
                <option value="low">D∆∞·ªõi 300.000 VNƒê</option>
                <option value="medium">300.000 - 350.000 VNƒê</option>
                <option value="high">Tr√™n 350.000 VNƒê</option>
              </select>
            </div>

            <div className="filter-group">
              <label>S·∫Øp x·∫øp:</label>
              <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
                className="filter-select"
              >
                <option value="rating">ƒê√°nh gi√° cao nh·∫•t</option>
                <option value="price-low">Gi√° th·∫•p ƒë·∫øn cao</option>
                <option value="price-high">Gi√° cao ƒë·∫øn th·∫•p</option>
                <option value="name">T√™n A-Z</option>
              </select>
            </div>

            <button
              onClick={clearFilters}
              className="clear-filters-btn"
            >
              X√≥a b·ªô l·ªçc
            </button>
          </div>

          <div className="results-info">
            <span>T√¨m th·∫•y {filteredTeachers.length} gi√°o vi√™n ph√π h·ª£p</span>
          </div>
        </div>

        {/* --- C·∫¨P NH·∫¨T PH·∫¶N HI·ªÇN TH·ªä DANH S√ÅCH GI√ÅO VI√äN --- */}
        <div className="teachers-grid">
          {filteredTeachers.length > 0 ? (
            filteredTeachers.map((teacher) => (
              // S·ª≠ d·ª•ng _id t·ª´ API l√†m key
              <div key={teacher._id} className="teacher-card">
                <div className="teacher-avatar">
                  {/* S·ª≠ d·ª•ng avatarUrl */}
                  <img src={teacher.avatarUrl} alt={teacher.name} />
                  <div className="rating">
                    <span>‚≠ê {teacher.rating || 'M·ªõi'}</span>
                  </div>
                </div>

                <div className="teacher-info">
                  <h3>{teacher.name}</h3>
                  {/* Hi·ªÉn th·ªã m·∫£ng specializations */}
                  <div className="specialty">{teacher.specializations.join(', ')}</div>
                  {/* S·ª≠ d·ª•ng experienceYears */}
                  <div className="experience">{teacher.experienceYears} nƒÉm kinh nghi·ªám</div>
                  {/* S·ª≠ d·ª•ng bio */}
                  <p className="description">{teacher.bio}</p>
                  {/* ƒê·ªãnh d·∫°ng l·∫°i pricePerHour */}
                  <div className="price">
                    {new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(teacher.pricePerHour)}/gi·ªù
                  </div>
                </div>

                <div className="teacher-actions">
                  <button
                    className="view-profile-btn"
                    onClick={() => onTeacherClick(teacher._id)} // Ch·ªâ truy·ªÅn ƒëi ID c·ªßa gi√°o vi√™n
                  >
                    Xem chi ti·∫øt
                  </button>

                </div>
              </div>
            ))
          ) : (
            <div className="no-results">
              <div className="no-results-icon">üòî</div>
              <h3>Kh√¥ng t√¨m th·∫•y gi√°o vi√™n ph√π h·ª£p</h3>
              <p>Th·ª≠ thay ƒë·ªïi b·ªô l·ªçc ho·∫∑c t·ª´ kh√≥a t√¨m ki·∫øm c·ªßa b·∫°n</p>
              <button onClick={clearFilters} className="reset-filters-btn">
                ƒê·∫∑t l·∫°i b·ªô l·ªçc
              </button>
            </div>
          )}
        </div>

        {/* Ph·∫ßn CTA gi·ªØ nguy√™n */}
        <div className="teachers-cta">
          <h2>Kh√¥ng t√¨m th·∫•y gi√°o vi√™n ph√π h·ª£p?</h2>
          <p>Li√™n h·ªá v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n v√† gi·ªõi thi·ªáu gi√°o vi√™n ph√π h·ª£p nh·∫•t</p>
          <button className="contact-btn">Li√™n h·ªá t∆∞ v·∫•n</button>
        </div>
      </div>
    </div>
  );
};

export default Teachers;
